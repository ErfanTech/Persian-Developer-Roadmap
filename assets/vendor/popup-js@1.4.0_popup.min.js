/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/@simondmc/popup-js@1.4.0/popup.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const queuedPopups = [];
let loadPhase = 0;
const head = document.getElementsByTagName("head")[0], link = document.createElement("link");

function loadPopups() {
    for (; queuedPopups.length > 0;) queuedPopups.shift().init()
}

link.rel = "stylesheet", link.type = "text/css", link.href = "https://cdn.jsdelivr.net/npm/@simondmc/popup-js@1.4.0/popup.min.css", link.media = "all", head.appendChild(link), link.onload = function () {
    loadPhase += 1, 2 === loadPhase && loadPopups()
}, window.addEventListener("load", (() => {
    loadPhase += 1, 2 === loadPhase && loadPopups()
}));

class Popup {
    constructor(t = {}) {
        this.params = t, 2 == loadPhase ? this.init() : queuedPopups.push(this)
    }

    init() {
        this.id = this.params.id ?? "popup";
        const t = this.params.title ?? "Popup Title";
        let s = this.params.content ?? "Popup Content";
        const e = this.params.titleColor ?? "#000000", o = this.params.backgroundColor ?? "#ffffff",
            i = this.params.closeColor ?? "#000000", a = this.params.textColor ?? "#000000",
            n = this.params.linkColor ?? "#383838", p = this.params.widthMultiplier ?? 1,
            l = this.params.heightMultiplier ?? .66, d = this.params.fontSizeMultiplier ?? 1,
            r = this.params.borderRadius ?? "15px", c = this.params.sideMargin ?? "3%",
            h = this.params.titleMargin ?? "2%", u = this.params.lineSpacing ?? "auto",
            m = this.params.showImmediately ?? !1, f = this.params.showOnce ?? !1, $ = this.params.fixedHeight ?? !1,
            b = this.params.allowClose ?? !0, g = this.params.underlineLinks ?? !1, w = this.params.fadeTime ?? "0.3s",
            v = this.params.buttonWidth ?? "fit-content", k = this.params.borderWidth ?? "0",
            S = this.params.borderColor ?? "#000000", C = this.params.disableScroll ?? !0,
            y = this.params.textShadow ?? "none", P = this.params.hideCloseButton ?? !1,
            L = this.params.hideTitle ?? !1, x = "min(" + 770 * l + "px, " + 90 * l + "vw)",
            E = "min(" + 770 * p + "px, " + 90 * p + "vw)", q = "min(" + 25 * d + "px, " + 5.5 * d + "vw)";
        let T = this.params.css ?? "";
        T += `\n        .popup.${this.id} {\n            transition-duration: ${w};\n            text-shadow: ${y};\n            font-family: '${this.params.font ?? "Inter"}', 'Inter', Helvetica, sans-serif;\n        }\n        \n        .popup.${this.id} .popup-content {\n            background-color: ${o};\n            width:${E}; \n            height:${$ ? x : "fit-content"};\n            border-radius: ${r};\n            border: ${k} solid ${S};\n        }\n\n        .popup.${this.id} .popup-header {\n            margin-bottom: ${h};\n        }\n\n        .popup.${this.id} .popup-title {\n            color: ${e};\n        }\n\n        .popup.${this.id} .popup-close {\n            color: ${i};\n        }\n\n        .popup.${this.id} .popup-body {\n            color: ${a};\n            margin-left: ${c};\n            margin-right: ${c};\n            line-height: ${u};\n            font-size: ${q};\n        }\n\n        .popup.${this.id} .popup-body button { \n            width: ${v}; \n        }\n\n        .popup.${this.id} .popup-body a { \n            color: ${n};\n            ${g ? "text-decoration: underline;" : ""}\n        }`;
        const H = document.head, M = document.createElement("style");
        H.append(M), M.appendChild(document.createTextNode(T)), s = s.split("\n");
        for (let t = 0; t < s.length; t++) {
            let e = s[t].trim();
            if ("" !== e) {
                if (e.includes("ยง")) {
                    const t = e.split("ยง");
                    e = `<p class="${t[0].trim()}">${t[1].trim()}</p>`
                } else e = `<p>${e}</p>`;
                for (e = e.replace(/  /g, "&nbsp;&nbsp;"); /{a-(.*?)}\[(.*?)]/.test(e);) e = e.replace(/{a-(.*?)}\[(.*?)]/g, '<a href="$1" target="_blank">$2</a>');
                for (; /{btn-(.*?)}\[(.*?)]/.test(e);) e = e.replace(/{btn-(.*?)}\[(.*?)]/g, '<button class="$1">$2</button>');
                e = e.replace(/([^\\]?){/g, '$1<span class="').replace(/([^\\]?)}\[/g, '$1">').replace(/([^\\]?)]/g, "$1</span>"), s[t] = e
            }
        }
        s = s.join("");
        const I = document.createElement("div");
        if (I.setAttribute("class", "popup " + this.id), I.innerHTML = `\n        <div class="popup-content">\n            <div class="popup-header">\n                ${L ? "" : `<div class="popup-title">${t}</div>`}\n                ${b && !P ? '<div class="popup-close">&times;</div>' : ""}\n            </div>\n            <div class="popup-body">${s}</div>\n        </div>`, document.body.appendChild(I), document.querySelectorAll(".popup").forEach((t => t.addEventListener("click", (s => {
            if ("popup-close" == s.target.className || s.target.classList.contains("popup")) {
                if (!b) return;
                t.classList.remove("fade-in"), t.classList.add("fade-out"), localStorage && f && localStorage.setItem("popup-" + this.id, !0), postHide(this)
            }
        })))), this.params.loadCallback && "function" == typeof this.params.loadCallback && this.params.loadCallback(), m) {
            if (f && localStorage && localStorage.getItem("popup-" + this.id)) return;
            document.querySelector(".popup." + this.id).classList.add("fade-in"), postShow(C)
        }
    }

    show() {
        const t = document.querySelector(".popup." + this.id);
        t.classList.remove("fade-out"), t.classList.add("fade-in"), postShow(this.params.disableScroll ?? !0)
    }

    hide() {
        const t = document.querySelector(".popup." + this.id);
        t.classList.remove("fade-in"), t.classList.add("fade-out"), postHide(this)
    }
}

function postShow(t) {
    t && disableScroll()
}

function postHide(t) {
    t.params.hideCallback && "function" == typeof t.params.hideCallback && t.params.hideCallback(), enableScroll()
}

function disableScroll() {
    const t = window.scrollY || document.documentElement.scrollTop,
        s = window.scrollX || document.documentElement.scrollLeft;
    window.onscroll = function () {
        window.scrollTo(s, t)
    }
}

function enableScroll() {
    window.onscroll = function () {
    }
}

//# sourceMappingURL=/sm/b1c293c5ee2002503108b49dd0fd5b1390286e3408736ed92299cd17af16492f.map